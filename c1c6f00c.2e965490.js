(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{188:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return c})),a.d(t,"metadata",(function(){return s})),a.d(t,"rightToc",(function(){return l})),a.d(t,"default",(function(){return b}));var r=a(1),o=a(9),n=(a(0),a(200)),i=a(202),c={lip:6,title:"Libra Validator Configuration Management",authors:"Valeria Nikolaenko (valerini), David Wolinsky (@davidiw), Dahlia Malkhi (dahliamalkhi)",status:"last call",type:"informational",created:"07/30/2020"},s={id:"lip-6",title:"Libra Validator Configuration Management",description:"# Summary",source:"@site/all-docs__GENERATED/lip-6.mdx",permalink:"/lip-6",editUrl:"https://github.com/libra/lip/edit/master/all-docs__GENERATED/lip-6.mdx"},l=[{value:"Terminology",id:"terminology",children:[]},{value:"Move modules",id:"move-modules",children:[]},{value:"Move resources",id:"move-resources",children:[]},{value:"Transaction scripts",id:"transaction-scripts",children:[]},{value:"Validator Owner and Validator Operator accounts creation",id:"validator-owner-and-validator-operator-accounts-creation",children:[]},{value:"Validator Owner to set the Validator Operator",id:"validator-owner-to-set-the-validator-operator",children:[]},{value:"Validator Operator (or Owner) to set the Config",id:"validator-operator-or-owner-to-set-the-config",children:[]},{value:"Validator Owner to be added/removed from the Validator Set",id:"validator-owner-to-be-addedremoved-from-the-validator-set",children:[]}],d={rightToc:l};function b(e){var t=e.components,a=Object(o.a)(e,["components"]);return Object(n.b)("wrapper",Object(r.a)({},d,a,{components:t,mdxType:"MDXLayout"}),Object(n.b)("h1",{id:"summary"},"Summary"),Object(n.b)("p",null,"This LIP describes the operation of the proof of authority consensus model that is used to establish consensus about the ledger state of the Libra Blockchain. In a proof of authority consensus model, known participants leverage cryptographical digital signatures to agree upon a set of transactions and their output to advance the blockchain's state. The set of potential entities that can participate in consensus are known as Validator Owners, while the active participants are known as the Validator Set.  The adding and removing of Validator Owners and specifying the current Validator Set is left to the sole discretion of the entity managing LibraRoot account."),Object(n.b)("h1",{id:"background"},"Background"),Object(n.b)("p",null,'Libra Payment Network ("LPN") is a blockchain-backed payment platform and an infrastructure for stablecoins.'),Object(n.b)("p",null,'The Libra Association ("LA" or the \u201cAssociation\u201d) is an independent membership organization that is responsible for the LPN technology and the development of the Libra project. The LA is governed by the Association Council, which is comprised of one representative per Association member. The Association Council manages the technology roadmap of the platform and oversees and maintains the Libra Improvement Proposal and Libra Upgrade Process, often through subcommittees of the Association Council such as the Technical Steering Committee (the \u201cTSC\u201d) and the Association Board.'),Object(n.b)("p",null,'Libra Networks ("LN"), a wholly owned subsidiary of LA is in the process of applying for a license as a payment system operator from the Swiss Financial Market Supervisory Authority ("FINMA").  Once granted, LN will be responsible for ensuring that LPN operates in compliance with the payment system license from FINMA.'),Object(n.b)("p",null,"Validator Owners are all members of the Association."),Object(n.b)("p",null,"LN and LA will jointly manage the LibraRoot account.  The LibraRoot account determines the composition of the Validator Set at any given time. Reasons for changing the Validator Set include new members joining the Association or existing members leaving the Association, possible suspension of Validator Owners for violating their Validator Agreement."),Object(n.b)("h1",{id:"framework-guide"},"Framework Guide"),Object(n.b)("h2",{id:"terminology"},"Terminology"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("em",{parentName:"li"},"Validator Node")," is a replica that runs the Libra consensus protocol to maintain and advance the blockchain state. A Validator Node processes transactions and interacts with other Validator Nodes to reach consensus on the ordering of transactions and the resulting state of the database after transaction execution."),Object(n.b)("li",{parentName:"ul"},Object(n.b)("em",{parentName:"li"},"Validator Config")," is an on-chain configuration or Move resource that contains configuration information of a Validator Node. This includes a ",Object(n.b)("em",{parentName:"li"},"consensus public key")," and ",Object(n.b)("a",Object(r.a)({parentName:"li"},{href:"https://github.com/libra/libra/blob/master/specifications/network/network-address.md"}),"network addresses"),"."),Object(n.b)("li",{parentName:"ul"},Object(n.b)("em",{parentName:"li"},"Consensus public key")," verifies the digital signature authenticating the sender of a consensus message in the Libra consensus protocol."),Object(n.b)("li",{parentName:"ul"},Object(n.b)("em",{parentName:"li"},"Network addresses")," define endpoints and cryptographic credentials for establishing secure connections with other Validator Nodes as well as FullNodes and other participants."),Object(n.b)("li",{parentName:"ul"},Object(n.b)("em",{parentName:"li"},"Validator Owner")," is the entity responsible for the operation of a Validator Node and is a member of the Libra Association. Each Validator Owner has an account on the Libra Blockchain that stores the Validator Config Move resource (see ",Object(n.b)("a",Object(r.a)({parentName:"li"},{href:"https://developers.libra.org/docs/move-paper"}),"Move Tutorial"),")."),Object(n.b)("li",{parentName:"ul"},Object(n.b)("em",{parentName:"li"},"Validator Operator")," is the entity, approved by LN, that operates a Validator Node. A Validator Operator could be run by a Validator Owner, or a Validator Operator could be a separate entity acting as an operator on behalf of one or more Validator Owners. A Validator Operator may run multiple Validator Nodes. The Validator Operator for a Validator Owner has permission to modify the Validator Config stored in the Validator Owner account and update its copy in the Validator Set."),Object(n.b)("li",{parentName:"ul"},Object(n.b)("em",{parentName:"li"},"Validator Set")," is an on-chain Move resource represented by a vector containing the active set of Validator Owners. There exists a one-to-one relationship between a Validator Owner in the Validator Set and a Validator Node. The entries within the Validator Set consist of the Validator Owner's address as well as a copy of its Validator Config. Each Validator Owner address must appear only once in the Validator Set. Validator Nodes run according to the configuration defined in the Validator Set. Validator Set changes come in two ways: a change in the set of Validator Owners or a change in the configuration of some Validator Owners. Both cases result in a Reconfiguration."),Object(n.b)("li",{parentName:"ul"},Object(n.b)("em",{parentName:"li"},"Reconfiguration")," is an on-chain configuration change. Reconfigurations are separated by epochs signified by a LibraConfig::NewEpochEvent. If a transaction causes a Reconfiguration, that transaction is the last transaction within the current epoch. Subsequent transactions will be executed in the new epoch with the configuration change that triggered the Reconfiguration."),Object(n.b)("li",{parentName:"ul"},Object(n.b)("em",{parentName:"li"},"LibraRoot")," is the sole account capable of adding or removing Validator Owner and Validator Operator accounts and specifying the current Validator Owners in the Validator Set. It may also submit an AdminScript."),Object(n.b)("li",{parentName:"ul"},Object(n.b)("em",{parentName:"li"},"AdminScript")," is a transaction script that can be sent by the LibraRoot on behalf of any other account. This includes key rotation enabling LibraRoot to support account recovery for both Validator Owners and Operators.")),Object(n.b)("p",null,"For the aforementioned roles, Libra uses a variant of role-based access control as defined in ",Object(n.b)("a",Object(r.a)({parentName:"p"},{href:"useBaseUrl('lip-2')"}),"LIP2: Libra Roles and Permissions"),"."),Object(n.b)("img",{alt:"Validator Set",src:Object(i.a)("img/validators_set.png")}),Object(n.b)("h2",{id:"move-modules"},"Move modules"),Object(n.b)("p",null,"Four move modules are involved in the validator configuration management"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",Object(r.a)({parentName:"li"},{href:"https://github.com/libra/libra/blob/master/language/stdlib/modules/ValidatorConfig.move"}),Object(n.b)("inlineCode",{parentName:"a"},"ValidatorConfig")),": defines local consensus configuration for a Validator Node of a Validator Owner."),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",Object(r.a)({parentName:"li"},{href:"https://github.com/libra/libra/blob/master/language/stdlib/modules/ValidatorOperatorConfig.move"}),Object(n.b)("inlineCode",{parentName:"a"},"ValidatorOperatorConfig")),": defines the configuration of the Validator Operator (it only contains a human-readable name)."),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",Object(r.a)({parentName:"li"},{href:"https://github.com/libra/libra/blob/master/language/stdlib/modules/LibraSystem.move"}),Object(n.b)("inlineCode",{parentName:"a"},"LibraSystem")),": publishes the Validator Set as a global on-chain config and enforces the rules for modifying it."),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",Object(r.a)({parentName:"li"},{href:"https://github.com/libra/libra/blob/master/language/stdlib/modules/LibraConfig.move"}),Object(n.b)("inlineCode",{parentName:"a"},"LibraConfig")),": a generic module that manages all of the global on-chain configurations, including the Validator Set configurations.")),Object(n.b)("h2",{id:"move-resources"},"Move resources"),Object(n.b)("p",null,"For Validator Owner the Libra Account has a ",Object(n.b)("em",{parentName:"p"},"Validator Role")," and stores a ",Object(n.b)("inlineCode",{parentName:"p"},"ValidatorConfig")," resource managed by ",Object(n.b)("inlineCode",{parentName:"p"},"ValidatorConfig")," module:"),Object(n.b)("pre",null,Object(n.b)("code",Object(r.a)({parentName:"pre"},{}),"resource struct ValidatorConfig {\n  config: Option<Config>,\n  operator_account: Option<address>,\n  human_name: vector<u8>,\n}\n")),Object(n.b)("p",null,"It contains a human-readable name, ",Object(n.b)("inlineCode",{parentName:"p"},"human_name"),", of the account, a UTF-8 encoded string, which is set at the account creation time and cannot be changed. The ",Object(n.b)("inlineCode",{parentName:"p"},"config")," and ",Object(n.b)("inlineCode",{parentName:"p"},"operator_account")," fields are initially set to ",Object(n.b)("inlineCode",{parentName:"p"},"none"),". The ",Object(n.b)("inlineCode",{parentName:"p"},"config")," is a place holder for parameters of the Validator Node."),Object(n.b)("pre",null,Object(n.b)("code",Object(r.a)({parentName:"pre"},{}),"struct Config {\n  consensus_pubkey: vector<u8>,\n  validator_network_addresses: vector<u8>,\n  fullnode_network_addresses: vector<u8>,\n}\n")),Object(n.b)("p",null,"For Validator Operator the Libra Account has a ",Object(n.b)("em",{parentName:"p"},"Validator Operator Role")," (see ",Object(n.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/libra/lip/blob/master/lips/lip-2.md"}),"lip-2: Libra Roles and Permissions"),") and stores a ",Object(n.b)("inlineCode",{parentName:"p"},"ValidatorOperatorConfig")," resource managed by the ",Object(n.b)("inlineCode",{parentName:"p"},"ValidatorOperatorConfig")," module."),Object(n.b)("pre",null,Object(n.b)("code",Object(r.a)({parentName:"pre"},{}),"resource struct ValidatorOperatorConfig {\n  human_name: vector<u8>,\n}\n")),Object(n.b)("p",null,"The Validator Set consists of a consensus signature scheme's id and the set of Validator Info described next."),Object(n.b)("pre",null,Object(n.b)("code",Object(r.a)({parentName:"pre"},{}),"struct LibraSystem {\n  scheme: u8,\n  validators: vector<ValidatorInfo>,\n}\n")),Object(n.b)("p",null,"Validator Info stores the address of the Validator Owner, the consensus voting power, the copy of the Validator Owner's config (the copy is made when the Validator Owner is added to the set or when the Validator Operator triggers an update of the config in the set), the last time the config was updated (when the Validator Owner was added to the Validator Set or when the config was updated by Validator Operator whichever is later)."),Object(n.b)("pre",null,Object(n.b)("code",Object(r.a)({parentName:"pre"},{}),"struct ValidatorInfo {\n  addr: address,\n  consensus_voting_power: u64,\n  config: ValidatorConfig::Config,\n  last_config_update_time: u64,\n}\n")),Object(n.b)("h2",{id:"transaction-scripts"},"Transaction scripts"),Object(n.b)("p",null,"The following transaction scripts can be run by the LibraRoot:"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",Object(r.a)({parentName:"li"},{href:"https://github.com/libra/libra/blob/master/language/stdlib/transaction_scripts/create_validator_account.move"}),Object(n.b)("inlineCode",{parentName:"a"},"create_validator_account"))," - creates a Validator Owner account (an account with Validator role)"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",Object(r.a)({parentName:"li"},{href:"https://github.com/libra/libra/blob/master/language/stdlib/transaction_scripts/create_validator_operator_account.move"}),Object(n.b)("inlineCode",{parentName:"a"},"create_validator_operator_account"))," - to create a Validator Operator account"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",Object(r.a)({parentName:"li"},{href:"https://github.com/libra/libra/blob/master/language/stdlib/transaction_scripts/add_validator_and_reconfigure.move"}),Object(n.b)("inlineCode",{parentName:"a"},"add_validator_and_reconfigure"))," - to add Validator Owner to the Validator Set with its current config and trigger reconfiguration"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",Object(r.a)({parentName:"li"},{href:"https://github.com/libra/libra/blob/master/language/stdlib/transaction_scripts/remove_validator_and_reconfigure.move"}),Object(n.b)("inlineCode",{parentName:"a"},"remove_validator_and_reconfigure"))," - to remove Validator Owner from the Validator Set and trigger reconfiguration")),Object(n.b)("p",null,"The following transaction scripts can be run by the Validator Owner:"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",Object(r.a)({parentName:"li"},{href:"https://github.com/libra/libra/blob/master/language/stdlib/transaction_scripts/set_validator_operator.move"}),Object(n.b)("inlineCode",{parentName:"a"},"set_validator_operator"))," - to designate the Validator Operator")),Object(n.b)("p",null,"The following transaction scripts can be run by the Validator Operator:"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",Object(r.a)({parentName:"li"},{href:"https://github.com/libra/libra/blob/master/language/stdlib/transaction_scripts/set_validator_config_and_reconfigure.move"}),Object(n.b)("inlineCode",{parentName:"a"},"set_validator_config_and_reconfigure"))," - to change values of the Validator Config resource and update the config in the Validator Set (aborts if the Validator Owner is not in the Validator Set)")),Object(n.b)("p",null,"The following script relevant to the operations of a Validator Owner and Validator Operator can also be run by any LibraAccount's owner:"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",Object(r.a)({parentName:"li"},{href:"https://github.com/libra/libra/blob/master/language/stdlib/transaction_scripts/rotate_authentication_key.move"}),Object(n.b)("inlineCode",{parentName:"a"},"rotate_authentication_key"))," - to rotate the authentication key of an account.")),Object(n.b)("p",null,"More on these transaction scripts (their specifications, information about error-codes and emitted events) can be found in ",Object(n.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/libra/libra/blob/master/language/stdlib/transaction_scripts/doc/transaction_script_documentation.md"}),"Overview of Libra Transaction Scripts"),"."),Object(n.b)("h1",{id:"workflows"},"Workflows"),Object(n.b)("p",null,"This section details the workflows or common scenarios related to Validator Set management."),Object(n.b)("h2",{id:"validator-owner-and-validator-operator-accounts-creation"},"Validator Owner and Validator Operator accounts creation"),Object(n.b)("p",null,'LibraRoot (through the Association Operation Services, "AOS") creates Validator Owner and Validator Operator accounts. To get an account created, each Validator Owner or Validator Operator needs to provide an authentication key and a name of their organization to LibraRoot. The authentication key is a 32 byte array, derived from the public verification key of Ed25519 or MultiEd25519 signature schemes.'),Object(n.b)("p",null,"LibraRoot creates the Validator Owner's account by sending the ",Object(n.b)("inlineCode",{parentName:"p"},"create_validator_account")," transaction script. An account address of a Validator Owner is derived from its name. A Validator Owner may ask the LibraRoot to manage the newly created account in which case for account creation a Validator Owner only needs to provide a name. In the case when LibraRoot maintains ownership of a Validator Owner's account the auth key of that account is set to an all-zeroes string and the transactions on behalf of the Validator Owner are sent via AdminScripts."),Object(n.b)("p",null,"LibraRoot creates the Validator Operator's account by sending the ",Object(n.b)("inlineCode",{parentName:"p"},"create_validator_account")," transaction script. An account address of a Validator Operator is derived from their authentication key in the usual way: the authentication key is obtained by SHA3-256-hashing of the scheme ID (one byte: 0 for Ed25519 signature scheme and 1 for MultiEd25519) concatenated with the bytes of the public key, the address is the last 16 bytes of the authentication key."),Object(n.b)("h2",{id:"validator-owner-to-set-the-validator-operator"},"Validator Owner to set the Validator Operator"),Object(n.b)("p",null,"Validator Owner may call a transaction script ",Object(n.b)("inlineCode",{parentName:"p"},"set_validator_operator")," to set the ",Object(n.b)("inlineCode",{parentName:"p"},"operator_account")," field of the ",Object(n.b)("inlineCode",{parentName:"p"},"ValidatorConfig")," resource. This script will succeed only if the ",Object(n.b)("inlineCode",{parentName:"p"},"operator_account")," has a Validator Operator role."),Object(n.b)("p",null,"The transaction script takes a human-readable name of the Validator Operator (for an additional validation check) and its on-chain address. When successful this transaction changes the field ",Object(n.b)("inlineCode",{parentName:"p"},"operator_account")," of the ",Object(n.b)("inlineCode",{parentName:"p"},"ValdiatorConfig")," resource of the Validator Owner calling the transaction. When the ",Object(n.b)("inlineCode",{parentName:"p"},"operator_account")," is set, only the ",Object(n.b)("inlineCode",{parentName:"p"},"operator_account")," may change the ",Object(n.b)("inlineCode",{parentName:"p"},"config")," field of the ",Object(n.b)("inlineCode",{parentName:"p"},"ValidatorConfig")," resource."),Object(n.b)("h2",{id:"validator-operator-or-owner-to-set-the-config"},"Validator Operator (or Owner) to set the Config"),Object(n.b)("p",null,"For a Validator Owner who is not yet added to the Validator Set, the Validator Operator may change the ",Object(n.b)("inlineCode",{parentName:"p"},"config")," by calling a transaction script ",Object(n.b)("inlineCode",{parentName:"p"},"register_validator_config"),". This script takes an address of the Validator Owner (to avoid confusion when one Validator Operator runs Validator Nodes for multiple Validator Owners), a new consensus public key (a 32 elements byte array) and two byte arrays for network addresses: ",Object(n.b)("inlineCode",{parentName:"p"},"validator_network_addresses")," for other Validator Operators to communicate with this Validator Operator during consensus and ",Object(n.b)("inlineCode",{parentName:"p"},"fullnode_network_addresses")," for network participation for nodes outside the current Validator Set."),Object(n.b)("p",null,"If a Validator Owner is in the Validator Set, the ",Object(n.b)("inlineCode",{parentName:"p"},"operator_account")," may update the ",Object(n.b)("inlineCode",{parentName:"p"},"config")," both locally and in the Validator Set by sending ",Object(n.b)("inlineCode",{parentName:"p"},"set_validator_config_and_reconfigure")," transaction script, this transaction script triggers the Reconfiguration."),Object(n.b)("h2",{id:"validator-owner-to-be-addedremoved-from-the-validator-set"},"Validator Owner to be added/removed from the Validator Set"),Object(n.b)("p",null,"A Validator Node is consensus-ready once the Validator Operator sets the config and the node is operational. At which point, AOS can submit a transaction from the LibraRoot account: ",Object(n.b)("inlineCode",{parentName:"p"},"add_validator_and_reconfigure"),". Once this transaction executes, it triggers the Reconfiguration, other Validator Operators connect to the Validator Node and the Validator Operator starts participating in the protocol. Note that the size of the Validator Set and hence the size of the quorum for consensus decisions increases."),Object(n.b)("p",null,"Under certain circumstances, such as, members leaving the Association or a Validator Owner breaching its Validator Agreement, the LibraRoot may remove or suspend a Validator Owner from the Validator Set. It does so by calling the ",Object(n.b)("inlineCode",{parentName:"p"},"remove_validator_and_reconfigure")," transaction script, which triggers the Reconfiguration. Note, that the size of the Validator Set and hence the size of the consensus quorum decreases."))}b.isMDXComponent=!0},200:function(e,t,a){"use strict";a.d(t,"a",(function(){return b})),a.d(t,"b",(function(){return u}));var r=a(0),o=a.n(r);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function c(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,o=function(e,t){if(null==e)return{};var a,r,o={},n=Object.keys(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var l=o.a.createContext({}),d=function(e){var t=o.a.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):c({},t,{},e)),a},b=function(e){var t=d(e.components);return o.a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},h=Object(r.forwardRef)((function(e,t){var a=e.components,r=e.mdxType,n=e.originalType,i=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),b=d(a),h=r,u=b["".concat(i,".").concat(h)]||b[h]||p[h]||n;return a?o.a.createElement(u,c({ref:t},l,{components:a})):o.a.createElement(u,c({ref:t},l))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var n=a.length,i=new Array(n);i[0]=h;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var l=2;l<n;l++)i[l]=a[l];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,a)}h.displayName="MDXCreateElement"},201:function(e,t,a){"use strict";var r=a(0),o=a(52);t.a=function(){return Object(r.useContext)(o.a)}},202:function(e,t,a){"use strict";a.d(t,"a",(function(){return o}));a(206);var r=a(201);function o(e){var t=(Object(r.a)().siteConfig||{}).baseUrl,a=void 0===t?"/":t;if(!e)return e;return/^(https?:|\/\/)/.test(e)?e:e.startsWith("/")?a+e.slice(1):a+e}},203:function(e,t,a){var r=a(78),o=a(26);e.exports=function(e,t,a){if(r(t))throw TypeError("String#"+a+" doesn't accept regex!");return String(o(e))}},204:function(e,t,a){var r=a(2)("match");e.exports=function(e){var t=/./;try{"/./"[e](t)}catch(a){try{return t[r]=!1,!"/./"[e](t)}catch(o){}}return!0}},206:function(e,t,a){"use strict";var r=a(12),o=a(24),n=a(203),i="".startsWith;r(r.P+r.F*a(204)("startsWith"),"String",{startsWith:function(e){var t=n(this,e,"startsWith"),a=o(Math.min(arguments.length>1?arguments[1]:void 0,t.length)),r=String(e);return i?i.call(t,r,a):t.slice(a,a+r.length)===r}})}}]);